{
  "Add": {
    "name": "Add",
    "description": "Adds numbers or concatenates strings",
    "description2": "",
    "tags": "Math,Custom",
    "hasExample": "FALSE"
  },
  "ArrayPush": {
    "name": "Add element to array",
    "description": "Adds an element at the end of the array",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "AND": {
    "name": "AND",
    "description": "Returns true if all of the inputs are truthy",
    "description2": "",
    "tags": "Logic,Custom",
    "hasExample": "FALSE"
  },
  "ArrayMethod": {
    "name": "Array method",
    "description": "Choose an array method and provide a callback",
    "description2": "",
    "tags": "Array",
    "hasExample": "FALSE"
  },
  "ArrayState": {
    "name": "Array state",
    "description": "Store elements in an array",
    "description2": "",
    "tags": "State",
    "hasExample": "FALSE"
  },
  "Break": {
    "name": "Break",
    "description": "Breaks out all properties of a JSON object or an array",
    "description2": "",
    "tags": "JSON",
    "hasExample": "TRUE"
  },
  "WidgetButton": {
    "name": "Button",
    "description": "Adds a button to trigger values",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "ChatGPTNode": {
    "name": "ChatGPT - Companion",
    "description": "ChatGPT communication through P&P Companion, uses environmental variable for API key",
    "description2": "<p><a style='color:#E154BB' href='https://www.mozilla.org/en-US/' target='_blank'>Download Plug and Play Companion</a></p>",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "CodeEditor": {
    "name": "Code editor",
    "description": "Adds a code editor",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "ColorArray": {
    "name": "Color array",
    "description": "Create color array",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "WidgetColorPicker": {
    "name": "Color picker",
    "description": "Adds a color picker",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "DRAW_COMBINE_ARRAY": {
    "name": "Combine draw array",
    "description": "Combines an array of draw objects",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Combine": {
    "name": "Combine objects",
    "description": "Combines two drawn objects",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "Comparison": {
    "name": "Compare",
    "description": "Compares two values (greater, less, equal, logical)",
    "description2": "",
    "tags": "Logic",
    "hasExample": "FALSE"
  },
  "ConcatenateArrays": {
    "name": "Concatenate arrays",
    "description": "Merges 2 arrays",
    "description2": "",
    "tags": "Array",
    "hasExample": "FALSE"
  },
  "ConsolePrint": {
    "name": "Console print",
    "description": "Logs the input in the console",
    "description2": "",
    "tags": "Debug",
    "hasExample": "FALSE"
  },
  "Constant": {
    "name": "Constant",
    "description": "Provides a constant input",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "ArrayToObject": {
    "name": "Convert array to object",
    "description": "Converts an array into an object using a specified property as key",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "Counts": {
    "name": "Count occurrences in array",
    "description": "Counts occurrences of elements in an array, by providing an array and an array with the unique values",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "ArrayCreate": {
    "name": "Create array",
    "description": "Creates an array from a single value",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "CustomFunction": {
    "name": "Custom function",
    "description": "Write your own custom function. Add input sockets, by adding parameters in the parentheses, separated by commas.",
    "description2": "",
    "tags": "Custom",
    "hasExample": "FALSE"
  },
  "DateAndTime": {
    "name": "Date and time",
    "description": "Outputs time in different formats",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "Divide": {
    "name": "Divide",
    "description": "Divides two numbers",
    "description2": "",
    "tags": "Math,Custom",
    "hasExample": "FALSE"
  },
  "DRAW_Image": {
    "name": "Draw image",
    "description": "Draws an image object (jpg,png)",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "ImageShader": {
    "name": "Draw image shader",
    "description": "Draws an image rendered in a shader",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Line": {
    "name": "Draw line",
    "description": "Draws a line specified by input points",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "GRAPH_LINE": {
    "name": "Draw Line Graph",
    "description": "Draws a line graph based on input points and optional labels",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Passthrough": {
    "name": "Draw Passthrough",
    "description": "Draws input draw object",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Polygon": {
    "name": "Draw polygon",
    "description": "Draws a polygon based on input points",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "Shader": {
    "name": "Draw shader",
    "description": "Draws a shader",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Shape": {
    "name": "Draw shape",
    "description": "Draws a shape",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Text": {
    "name": "Draw text",
    "description": "Draws text object",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "WidgetDropdown": {
    "name": "Dropdown",
    "description": "Adds a dropdown to select values",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "EmbedWebsite": {
    "name": "Embed website",
    "description": "Embed a website using an iframe. You can also just paste a URL into the playground",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "ExecuteMacro": {
    "name": "Execute Macro",
    "description": "Executes a macro that is defined in the graph",
    "description2": "",
    "tags": "Macro,Custom",
    "hasExample": "FALSE"
  },
  "Export_Image_From_Graphics": {
    "name": "Export image from graphic",
    "description": "Exports image from a graphic",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "Filter": {
    "name": "Filter array",
    "description": "Filters an array, using your own filter condition",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "Flatten": {
    "name": "Flatten array",
    "description": "Flattens an array. All sub-array elements will be concatenated into it recursively",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "JSONGet": {
    "name": "Get a JSON value",
    "description": "Returns a single value of a JSON at the defined path",
    "description2": "",
    "tags": "JSON",
    "hasExample": "FALSE"
  },
  "JSONKeys": {
    "name": "Get all JSON keys",
    "description": "Gets all keys from a JSON (or object)",
    "description2": "",
    "tags": "JSON,Custom",
    "hasExample": "FALSE"
  },
  "JSONValues": {
    "name": "Get all JSON values",
    "description": "Gets all values from a JSON (or object)",
    "description2": "",
    "tags": "JSON,Custom",
    "hasExample": "FALSE"
  },
  "ArrayGet": {
    "name": "Get from array",
    "description": "Returns an element based on its index position",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "Table_GetColumnByName": {
    "name": "Get table column by name",
    "description": "Returns the column data of a specified column",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "GridCoordinates": {
    "name": "Grid coordinates",
    "description": "Create grid coordinates",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "HtmlRenderer": {
    "name": "Html renderer",
    "description": "Renders html",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "HTTPNode": {
    "name": "HTTP",
    "description": "Make an HTTP request to get data from or send data to a server or API",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "If_Else": {
    "name": "If else condition",
    "description": "Passes through input A or B based on a condition",
    "description2": "",
    "tags": "Logic",
    "hasExample": "FALSE"
  },
  "Image": {
    "name": "Image",
    "description": "Draws an Image. To import an image, just drag the file onto the playground",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "IsValid": {
    "name": "IsValid",
    "description": "Check if an input is valid (undefined, null)",
    "description2": "",
    "tags": "Logic",
    "hasExample": "FALSE"
  },
  "JumpToNode": {
    "name": "Jump to node",
    "description": "Adds a button which can be used to jump to another node",
    "description2": "",
    "tags": "Playground,Widget",
    "hasExample": "FALSE"
  },
  "Keyboard": {
    "name": "Keyboard",
    "description": "Get keyboard input",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "Label": {
    "name": "Label",
    "description": "Adds a text label",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "ArrayLength": {
    "name": "Length of array",
    "description": "Returns the length of an array",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "LoadNPM": {
    "name": "Load NPM package",
    "description": "Lazy loads an NPM package",
    "description2": "",
    "tags": "Playground,Custom",
    "hasExample": "FALSE"
  },
  "LogViewer": {
    "name": "Log viewer",
    "description": "Adds a log viewer",
    "description2": "",
    "tags": "Debug",
    "hasExample": "FALSE"
  },
  "Macro": {
    "name": "Macro",
    "description": "Wrap a group of nodes into a macro and use this Macro as often as you want",
    "description2": "",
    "tags": "Macro",
    "hasExample": "FALSE"
  },
  "Map": {
    "name": "Map array",
    "description": "Transform and or filter each element of an array",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "MathFunction": {
    "name": "Math function",
    "description": "Perform mathematical operations or get constants",
    "description2": "",
    "tags": "Math",
    "hasExample": "FALSE"
  },
  "Max": {
    "name": "Max element in array",
    "description": "Returns the largest number of the array",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "MergeJSONs": {
    "name": "Merge JSONs",
    "description": "Merges 2 JSON objects",
    "description2": "",
    "tags": "JSON",
    "hasExample": "FALSE"
  },
  "Min": {
    "name": "Min element in array",
    "description": "Returns the smallest number of the array",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "Mouse": {
    "name": "Mouse",
    "description": "Gets mouse coordinates",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "Multiply": {
    "name": "Multiply",
    "description": "Multiplies two numbers",
    "description2": "",
    "tags": "Math,Custom",
    "hasExample": "FALSE"
  },
  "DRAW_Multiplier": {
    "name": "Multiply object",
    "description": "Multiples a drawing objects onto a grid",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "DRAW_Multipy_Along": {
    "name": "Multiply onto points",
    "description": "Multiples a drawing onto points",
    "description2": "",
    "tags": "Draw",
    "hasExample": "FALSE"
  },
  "NOT": {
    "name": "NOT",
    "description": "Returns the inverse of the input",
    "description2": "",
    "tags": "Logic,Custom",
    "hasExample": "FALSE"
  },
  "NumberState": {
    "name": "Number state",
    "description": "Store a number and increment/decrement it",
    "description2": "",
    "tags": "State",
    "hasExample": "FALSE"
  },
  "ObjectFilter": {
    "name": "Object filter",
    "description": "Filters objects (JSON) based on their properties",
    "description2": "",
    "tags": "Array",
    "hasExample": "FALSE"
  },
  "ObjectState": {
    "name": "Object state",
    "description": "Store elements by key",
    "description2": "",
    "tags": "State",
    "hasExample": "FALSE"
  },
  "OpenURL": {
    "name": "Open URL",
    "description": "Opens a URL in a new tab",
    "description2": "",
    "tags": "Playground,Custom",
    "hasExample": "FALSE"
  },
  "OR": {
    "name": "OR",
    "description": "Returns true if any of the inputs are truthy",
    "description2": "",
    "tags": "Logic,Custom",
    "hasExample": "FALSE"
  },
  "ParseArray": {
    "name": "Parse array",
    "description": "Transforms all elements of an array to a different data type. Use it to, for example, to parse a number string \"12\" to a number",
    "description2": "",
    "tags": "Array",
    "hasExample": "FALSE"
  },
  "PixotopeGatewayCall": {
    "name": "Pixotope Call",
    "description": "Pixotope Gateway: Send a ZMQ call",
    "description2": "",
    "tags": "Pixotope",
    "hasExample": "FALSE"
  },
  "PixotopeGatewayCallSaveImage": {
    "name": "Pixotope Call SaveImage",
    "description": "Pixotope Gateway: Get an image from the videoIO service",
    "description2": "",
    "tags": "Pixotope",
    "hasExample": "FALSE"
  },
  "PixotopeGatewayGet": {
    "name": "Pixotope Get",
    "description": "Pixotope Gateway: Get a value from a service",
    "description2": "",
    "tags": "Pixotope",
    "hasExample": "FALSE"
  },
  "PixotopeGatewaySet": {
    "name": "Pixotope Set",
    "description": "Pixotope Gateway: Set a value on a service",
    "description2": "",
    "tags": "Pixotope",
    "hasExample": "FALSE"
  },
  "Placeholder": {
    "name": "Placeholder",
    "description": "Adds a placeholder node",
    "description2": "",
    "tags": "Playground",
    "hasExample": "FALSE"
  },
  "Playground": {
    "name": "Playground",
    "description": "Exposes some Playground functions",
    "description2": "",
    "tags": "Playground",
    "hasExample": "FALSE"
  },
  "WidgetRadio": {
    "name": "Radio Button",
    "description": "Adds a radio button",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "RandomArray": {
    "name": "Random array",
    "description": "Creates an array with random numbers",
    "description2": "",
    "tags": "Array",
    "hasExample": "FALSE"
  },
  "RangeArray": {
    "name": "Range array",
    "description": "Creates an array of a number range",
    "description2": "",
    "tags": "Array",
    "hasExample": "FALSE"
  },
  "RecordLocations": {
    "name": "Record locations",
    "description": "Records the mouse location",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "Reroute": {
    "name": "Reroute",
    "description": "Adds a node to reroute connections",
    "description2": "",
    "tags": "Playground",
    "hasExample": "FALSE"
  },
  "JSONSet": {
    "name": "Set JSON value",
    "description": "Sets a value on a JSON at the defined path",
    "description2": "",
    "tags": "JSON",
    "hasExample": "FALSE"
  },
  "SimpleBarGraphSegmentNode": {
    "name": "Simple Bar Graph",
    "description": "Shows a simple bar graph segment",
    "description2": "",
    "tags": "Segment",
    "hasExample": "FALSE"
  },
  "ArraySlice": {
    "name": "Slice array",
    "description": "Returns a section of an array using start and end indices",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  },
  "WidgetSlider": {
    "name": "Slider",
    "description": "Adds a number slider",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "Sqrt": {
    "name": "Square root",
    "description": "Square root of number",
    "description2": "",
    "tags": "Math,Custom",
    "hasExample": "FALSE"
  },
  "Subtract": {
    "name": "Subtract",
    "description": "Subtracts two numbers",
    "description2": "",
    "tags": "Math,Custom",
    "hasExample": "FALSE"
  },
  "WidgetSwitch": {
    "name": "Switch",
    "description": "Adds a switch to toggle between values",
    "description2": "",
    "tags": "Widget",
    "hasExample": "FALSE"
  },
  "Table": {
    "name": "Table",
    "description": "Adds a table. To import a spreadsheets, just drag the file onto the playground",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "TestDataTypes": {
    "name": "Test data types",
    "description": "Adds a test node which lists all available socket data types",
    "description2": "",
    "tags": "Playground",
    "hasExample": "FALSE"
  },
  "TextEditor": {
    "name": "Text editor",
    "description": "Adds a rich text editor",
    "description2": "",
    "tags": "Input",
    "hasExample": "FALSE"
  },
  "ThrottleDebounce": {
    "name": "Throttle/Debounce",
    "description": "Limits how often the value is passed through",
    "description2": "",
    "tags": "Logic",
    "hasExample": "FALSE"
  },
  "Uniques": {
    "name": "Unique array",
    "description": "Returns an array with unique values, removing all duplicates",
    "description2": "",
    "tags": "Array,Custom",
    "hasExample": "FALSE"
  }
}