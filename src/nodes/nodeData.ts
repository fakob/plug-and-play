import { NODE_TYPE_COLOR } from '../utils/constants';

type NodeDataType = Record<
  string,
  {
    name?: string;
    description?: string;
    description2?: string;
    tags?: string[];
    hasExample?: boolean;
    color?: string;
  }
>;

export const nodeData: NodeDataType = {
  Add: {
    name: 'Add',
    description: 'Adds numbers or concatenates strings',
    description2: '',
    tags: ['Math', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  ArrayPush: {
    name: 'Add element to array',
    description: 'Adds an element at the end of the array',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  AND: {
    name: 'AND',
    description: 'Returns true if all of the inputs are truthy',
    description2: '',
    tags: ['Logic', 'Custom'],
    hasExample: false,
  },
  ArrayMethod: {
    name: 'Array method',
    description: 'Choose an array method and provide a callback',
    description2: '',
    tags: ['Array'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  ArrayState: {
    name: 'Array state',
    description: 'Store elements in an array',
    description2: '',
    tags: ['State'],
    hasExample: false,
  },
  Break: {
    name: 'Break',
    description: 'Breaks out all properties of a JSON object or an array',
    description2: '',
    tags: ['JSON'],
    hasExample: true,
  },
  WidgetButton: {
    name: 'Button',
    description: 'Adds a button to trigger values',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  ChatGPTNode: {
    name: 'ChatGPT - Companion',
    description:
      'ChatGPT communication through P&P Companion, uses environmental variable for API key',
    description2:
      "<p><a style='color:#E154BB' href='https://www.mozilla.org/en-US/' target='_blank'>Download Plug and Play Companion</a></p>",
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  CodeEditor: {
    name: 'Code editor',
    description: 'Adds a code editor',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  ColorArray: {
    name: 'Color array',
    description: 'Create color array',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  WidgetColorPicker: {
    name: 'Color picker',
    description: 'Adds a color picker',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  DRAW_COMBINE_ARRAY: {
    name: 'Combine draw array',
    description: 'Combines an array of draw objects',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Combine: {
    name: 'Combine objects',
    description: 'Combines two drawn objects',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  Comparison: {
    name: 'Compare',
    description: 'Compares two values (greater, less, equal, logical)',
    description2: '',
    tags: ['Logic'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  ConcatenateArrays: {
    name: 'Concatenate arrays',
    description: 'Merges 2 arrays',
    description2: '',
    tags: ['Array'],
    hasExample: false,
  },
  ConsolePrint: {
    name: 'Console print',
    description: 'Logs the input in the console',
    description2: '',
    tags: ['Debug'],
    hasExample: false,
  },
  Constant: {
    name: 'Constant',
    description: 'Provides a constant input',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  ArrayToObject: {
    name: 'Convert array to object',
    description:
      'Converts an array into an object using a specified property as key',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  Counts: {
    name: 'Count occurrences in array',
    description:
      'Counts occurrences of elements in an array, by providing an array and an array with the unique values',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  ArrayCreate: {
    name: 'Create array',
    description: 'Creates an array from a single value',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  CustomFunction: {
    name: 'Custom function',
    description:
      'Write your own custom function. Add input sockets, by adding parameters in the parentheses, separated by commas.',
    description2: '',
    tags: ['Custom'],
    hasExample: false,
  },
  DateAndTime: {
    name: 'Date and time',
    description: 'Outputs time in different formats',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  Divide: {
    name: 'Divide',
    description: 'Divides two numbers',
    description2: '',
    tags: ['Math', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  DRAW_Image: {
    name: 'Draw image',
    description: 'Draws an image object (jpg,png)',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  ImageShader: {
    name: 'Draw image shader',
    description: 'Draws an image rendered in a shader',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Line: {
    name: 'Draw line',
    description: 'Draws a line specified by input points',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  GRAPH_LINE: {
    name: 'Draw Line Graph',
    description: 'Draws a line graph based on input points and optional labels',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Passthrough: {
    name: 'Draw Passthrough',
    description: 'Draws input draw object',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Polygon: {
    name: 'Draw polygon',
    description: 'Draws a polygon based on input points',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  Shader: {
    name: 'Draw shader',
    description: 'Draws a shader',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Shape: {
    name: 'Draw shape',
    description: 'Draws a shape',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Text: {
    name: 'Draw text',
    description: 'Draws text object',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  WidgetDropdown: {
    name: 'Dropdown',
    description: 'Adds a dropdown to select values',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  EmbedWebsite: {
    name: 'Embed website',
    description:
      'Embed a website using an iframe. You can also just paste a URL into the playground',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  ExecuteMacro: {
    name: 'Execute Macro',
    description: 'Executes a macro that is defined in the graph',
    description2: '',
    tags: ['Macro', 'Custom'],
    hasExample: false,
  },
  Export_Image_From_Graphics: {
    name: 'Export image from graphic',
    description: 'Exports image from a graphic',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  Filter: {
    name: 'Filter array',
    description: 'Filters an array, using your own filter condition',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  Flatten: {
    name: 'Flatten array',
    description:
      'Flattens an array. All sub-array elements will be concatenated into it recursively',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  JSONGet: {
    name: 'Get a JSON value',
    description: 'Returns a single value of a JSON at the defined path',
    description2: '',
    tags: ['JSON'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  JSONKeys: {
    name: 'Get all JSON keys',
    description: 'Gets all keys from a JSON (or object)',
    description2: '',
    tags: ['JSON', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  JSONValues: {
    name: 'Get all JSON values',
    description: 'Gets all values from a JSON (or object)',
    description2: '',
    tags: ['JSON', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  ArrayGet: {
    name: 'Get from array',
    description: 'Returns an element based on its index position',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  Table_GetColumnByName: {
    name: 'Get table column by name',
    description: 'Returns the column data of a specified column',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  GridCoordinates: {
    name: 'Grid coordinates',
    description: 'Create grid coordinates',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  HtmlRenderer: {
    name: 'Html renderer',
    description: 'Renders html',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  HTTPNode: {
    name: 'HTTP',
    description:
      'Make an HTTP request to get data from or send data to a server or API',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  If_Else: {
    name: 'If else condition',
    description: 'Passes through input A or B based on a condition',
    description2: '',
    tags: ['Logic'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  Image: {
    name: 'Image',
    description:
      'Draws an Image. To import an image, just drag the file onto the playground',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  IsValid: {
    name: 'IsValid',
    description: 'Check if an input is valid (undefined, null)',
    description2: '',
    tags: ['Logic'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  JumpToNode: {
    name: 'Jump to node',
    description: 'Adds a button which can be used to jump to another node',
    description2: '',
    tags: ['Playground', 'Widget'],
    hasExample: false,
  },
  Keyboard: {
    name: 'Keyboard',
    description: 'Get keyboard input',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  Label: {
    name: 'Label',
    description: 'Adds a text label',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  ArrayLength: {
    name: 'Length of array',
    description: 'Returns the length of an array',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  LoadNPM: {
    name: 'Load NPM package',
    description: 'Lazy loads an NPM package',
    description2: '',
    tags: ['Playground', 'Custom'],
    hasExample: false,
  },
  LogViewer: {
    name: 'Log viewer',
    description: 'Adds a log viewer',
    description2: '',
    tags: ['Debug'],
    hasExample: false,
  },
  Macro: {
    name: 'Macro',
    description:
      'Wrap a group of nodes into a macro and use this Macro as often as you want',
    description2: '',
    tags: ['Macro'],
    hasExample: false,
  },
  Map: {
    name: 'Map array',
    description: 'Transform and or filter each element of an array',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  MathFunction: {
    name: 'Math function',
    description: 'Perform mathematical operations or get constants',
    description2: '',
    tags: ['Math'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  Max: {
    name: 'Max element in array',
    description: 'Returns the largest number of the array',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  MergeJSONs: {
    name: 'Merge JSONs',
    description: 'Merges 2 JSON objects',
    description2: '',
    tags: ['JSON'],
    hasExample: false,
  },
  Min: {
    name: 'Min element in array',
    description: 'Returns the smallest number of the array',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  Mouse: {
    name: 'Mouse',
    description: 'Gets mouse coordinates',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  Multiply: {
    name: 'Multiply',
    description: 'Multiplies two numbers',
    description2: '',
    tags: ['Math', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  DRAW_Multiplier: {
    name: 'Multiply object',
    description: 'Multiples a drawing objects onto a grid',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  DRAW_Multipy_Along: {
    name: 'Multiply onto points',
    description: 'Multiples a drawing onto points',
    description2: '',
    tags: ['Draw'],
    hasExample: false,
  },
  NOT: {
    name: 'NOT',
    description: 'Returns the inverse of the input',
    description2: '',
    tags: ['Logic', 'Custom'],
    hasExample: false,
  },
  NumberState: {
    name: 'Number state',
    description: 'Store a number and increment/decrement it',
    description2: '',
    tags: ['State'],
    hasExample: false,
  },
  ObjectFilter: {
    name: 'Object filter',
    description: 'Filters objects (JSON) based on their properties',
    description2: '',
    tags: ['Array'],
    hasExample: false,
  },
  ObjectState: {
    name: 'Object state',
    description: 'Store elements by key',
    description2: '',
    tags: ['State'],
    hasExample: false,
  },
  OpenURL: {
    name: 'Open URL',
    description: 'Opens a URL in a new tab',
    description2: '',
    tags: ['Playground', 'Custom'],
    hasExample: false,
  },
  OR: {
    name: 'OR',
    description: 'Returns true if any of the inputs are truthy',
    description2: '',
    tags: ['Logic', 'Custom'],
    hasExample: false,
  },
  ParseArray: {
    name: 'Parse array',
    description:
      'Transforms all elements of an array to a different data type. Use it to, for example, to parse a number string "12" to a number',
    description2: '',
    tags: ['Array'],
    hasExample: false,
  },
  PixotopeGatewayCall: {
    name: 'Pixotope Call',
    description: 'Pixotope Gateway: Send a ZMQ call',
    description2: '',
    tags: ['Pixotope'],
    hasExample: false,
  },
  PixotopeGatewayCallSaveImage: {
    name: 'Pixotope Call SaveImage',
    description: 'Pixotope Gateway: Get an image from the videoIO service',
    description2: '',
    tags: ['Pixotope'],
    hasExample: false,
  },
  PixotopeGatewayGet: {
    name: 'Pixotope Get',
    description: 'Pixotope Gateway: Get a value from a service',
    description2: '',
    tags: ['Pixotope'],
    hasExample: false,
  },
  PixotopeGatewaySet: {
    name: 'Pixotope Set',
    description: 'Pixotope Gateway: Set a value on a service',
    description2: '',
    tags: ['Pixotope'],
    hasExample: false,
  },
  Placeholder: {
    name: 'Placeholder',
    description: 'Adds a placeholder node',
    description2: '',
    tags: ['Playground'],
    hasExample: false,
    color: NODE_TYPE_COLOR.MISSING,
  },
  Playground: {
    name: 'Playground',
    description: 'Exposes some Playground functions',
    description2: '',
    tags: ['Playground'],
    hasExample: false,
    color: NODE_TYPE_COLOR.SYSTEM,
  },
  WidgetRadio: {
    name: 'Radio Button',
    description: 'Adds a radio button',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  RandomArray: {
    name: 'Random array',
    description: 'Creates an array with random numbers',
    description2: '',
    tags: ['Array'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  RangeArray: {
    name: 'Range array',
    description: 'Creates an array of a number range',
    description2: '',
    tags: ['Array'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  RecordLocations: {
    name: 'Record locations',
    description: 'Records the mouse location',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  Reroute: {
    name: 'Reroute',
    description: 'Adds a node to reroute connections',
    description2: '',
    tags: ['Playground'],
    hasExample: false,
  },
  JSONSet: {
    name: 'Set JSON value',
    description: 'Sets a value on a JSON at the defined path',
    description2: '',
    tags: ['JSON'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  SimpleBarGraphSegmentNode: {
    name: 'Simple Bar Graph',
    description: 'Shows a simple bar graph segment',
    description2: '',
    tags: ['Segment'],
    hasExample: false,
  },
  ArraySlice: {
    name: 'Slice array',
    description: 'Returns a section of an array using start and end indices',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
  WidgetSlider: {
    name: 'Slider',
    description: 'Adds a number slider',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  Sqrt: {
    name: 'Square root',
    description: 'Square root of number',
    description2: '',
    tags: ['Math', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  Subtract: {
    name: 'Subtract',
    description: 'Subtracts two numbers',
    description2: '',
    tags: ['Math', 'Custom'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  WidgetSwitch: {
    name: 'Switch',
    description: 'Adds a switch to toggle between values',
    description2: '',
    tags: ['Widget'],
    hasExample: false,
  },
  Table: {
    name: 'Table',
    description:
      'Adds a table. To import a spreadsheets, just drag the file onto the playground',
    description2: '',
    tags: ['Input'],
    hasExample: false,
    color: NODE_TYPE_COLOR.INPUT,
  },
  TestDataTypes: {
    name: 'Test data types',
    description: 'Adds a test node which lists all available socket data types',
    description2: '',
    tags: ['Playground'],
    hasExample: false,
  },
  TextEditor: {
    name: 'Text editor',
    description: 'Adds a rich text editor',
    description2: '',
    tags: ['Input'],
    hasExample: false,
  },
  ThrottleDebounce: {
    name: 'Throttle/Debounce',
    description: 'Limits how often the value is passed through',
    description2: '',
    tags: ['Logic'],
    hasExample: false,
    color: NODE_TYPE_COLOR.TRANSFORM,
  },
  Uniques: {
    name: 'Unique array',
    description: 'Returns an array with unique values, removing all duplicates',
    description2: '',
    tags: ['Array', 'Custom'],
    hasExample: false,
  },
};
